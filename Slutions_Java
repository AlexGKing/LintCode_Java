#1
给出两个整数a和b, 求他们的和, 但不能使用 + 等数学运算符。
提示：位操作

class Solution {
    /*
     * param a: The first integer
     * param b: The second integer
     * return: The sum of a and b
     */
    public int aplusb(int a, int b) {
        // write your code here, try to do it without arithmetic operators.
        int jw = a & b;
        int jg = a ^ b;
        while (jw>0){
            int ta = jg;
            int tb = jw << 1;
            jw = ta & tb;
            jg = ta ^ tb;
        }
        return jg;
    }
};

#2
设计一个算法，计算出n阶乘中尾部零的个数，例如：11! = 39916800，因此应该返回 2
要求：O(logN)的时间复杂度

class Solution {
    /*
     * param n: As desciption
     * return: An integer, denote the number of trailing zeros in n!
     */
    public long trailingZeros(long n) {
       long sum = 0;
        while (n != 0) {
            sum += n / 5;
            n /= 5;
        }
        return sum;
    }
};

#14二分查找
给定一个排序的整数数组（升序）和一个要查找的整数target，用O(logn)的时间查找到target第一次出现的下标（从0开始,
如果target不存在于数组中，返回-1。
样例：在数组 [1, 2, 3, 3, 4, 5, 10] 中二分查找3，返回2。
标签：二分法，数组

class Solution {
    /**
     * @param nums: The integer array.
     * @param target: Target to find.
     * @return: The first position of target. Position starts from 0.
     */
    public int bs(int[] nums, int start,int end, int target) {
        if(start>end) {
            return -1;
        } else {
            int mid = (start + end) / 2;
            if(nums[mid] == target) {
                while(mid>0){
                    if(nums[mid] == nums[mid-1]){
                        mid--;
                    } else {
                        break;
                    }
                }
                return mid;
            } else if(nums[mid]>target) {
                return bs(nums,start,mid-1,target);
            } else {
                return bs(nums,mid+1,end,target);
            }
        }
    }
    public int binarySearch(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return -1;
        } else {
            return bs(nums,0,nums.length-1,target);
        }
    }
}

#28搜索二维矩阵
写出一个高效的算法来搜索 m × n矩阵中的值。
这个矩阵具有以下特性：
每行中的整数从左到右是排序的。
每行的第一个数大于上一行的最后一个整数。
样例：
[
  [1, 3, 5, 7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3 ,return true;
标签：二分法，矩阵

public class Solution {
    /**
     * @param matrix, a list of lists of integers
     * @param target, an integer
     * @return a boolean, indicate whether matrix contains target
     */
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix == null || matrix.length == 0) {
            return false;
        }
        int m = matrix.length;
        int n = matrix[0].length;
        if (target < matrix[0][0] || target > matrix[m-1][n-1]) {
            return false;
        } else {
            int i = 0;
            int j = 0;
            while (i < m && j < n) {
                if (target == matrix[i][j]) {
                    return true;
                } else if (target < matrix[i][j]){
                    return false;
                } else if (target > matrix[i][n-1]){
                    i++;
                    j=0;
                } else {
                    j++;
                }
            }
            return false;
        }
    }
}

#35翻转链表
翻转一个链表
样例：给出一个链表1->2->3->null，这个翻转后的链表为3->2->1->null
挑战：在原地一次翻转完成
标签：链表

 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param head: The head of linked list.
     * @return: The new head of reversed linked list.
     */
    public ListNode reverse(ListNode head) {
        // write your code here
        if (head == null) {
            return null;
        } else if(head.next == null) {
            return head;
        } else {
            ListNode former = head.next;
            ListNode res = head;
            ListNode tmp = head;
            head.next = null;
            while (former!= null) {
                tmp = res;
                res = former;
                former = former.next;
                res.next = tmp;                
            }
            return res;
        }
    }
}
#40用栈实现队列
正如标题所述，你需要使用两个栈来实现队列的一些操作。
队列应支持push(element)，pop() 和 top()，其中pop是弹出队列中的第一个(最前面的)元素。
pop和top方法都应该返回第一个元素的值。
标签：栈，队列
public class Queue {
    private Stack<Integer> stack1;
    private Stack<Integer> stack2;

    public Queue() {
       stack1 = new Stack<Integer>();
       stack2 = new Stack<Integer>();
    }
    
    public void push(int element) {
        if (stack2.empty()) {
            stack1.push(element);
        } else {
            while(!stack2.empty()) {
                stack1.push(stack2.pop());
            }
            stack1.push(element);
        }
    }

    public int pop() {
        if (!stack2.empty()) {
            return stack2.pop();
        } else {
            while (!stack1.empty()) {
                stack2.push(stack1.pop());
            }
            return stack2.pop();
        }
    }

    public int top() {
        if (!stack2.empty()) {
            return stack2.peek();
        } else {
            while (!stack1.empty()) {
                stack2.push(stack1.pop());
            }
            return stack2.peek();
        }
    }
}
#55 比较字符串
比较两个字符串A和B，确定A中是否包含B中所有的字符。字符串A和B中的字符都是大写字母
样例：
给出 A = "ABCD" B = "ACD"，返回 true
给出 A = "ABCD" B = "AABC"， 返回 false
标签：字符串处理 hash

public class Solution {
    /**
     * @param A : A string includes Upper Case letters
     * @param B : A string includes Upper Case letter
     * @return :  if string A contains all of the characters in B return true else return false
     */
    public boolean compareStrings(String A, String B) {
        if(A == null && B == null){
            return true;
        } else if (A == null && B != null) {
            return false;
        } else if( A != null && B == null) {
            return true;
        } else {
            int[] alphabetA = new int[26];
            int[] alphabetB = new int[26];
            for (int i = 0; i < 26; i++) {
                alphabetA[i] = 0;
                alphabetB[i] = 0;
            }
            for (int i = 0; i < A.length(); i++) {
                alphabetA[A.charAt(i) - 'A']++;
            }
            for (int i = 0; i < B.length(); i++) {
                alphabetB[B.charAt(i) - 'A']++;
            }
            for(int i = 0; i < 26; i++){
                if(alphabetB[i] > alphabetA[i]) {
                    return false;
                }
            }
            return true;
        }
    }
}
#85 在二叉查找树中插入节点
给定一棵二叉查找树和一个新的树节点，将节点插入到树中。
你需要保证该树仍然是一棵二叉查找树。
样例：
给出如下一棵二叉查找树，在插入节点6之后这棵二叉查找树可以是这样的：
  2             2
 / \           / \
1   4   -->   1   4
   /             / \ 
  3             3   6
 标签：二叉查找树
 /**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root: The root of the binary search tree.
     * @param node: insert this node into the binary search tree
     * @return: The root of the new binary search tree.
     */
    public TreeNode insertNode(TreeNode root, TreeNode node) {
        if (root == null) {
            return node;
        } else if(node == null) {
            return root;
        } else {
            if (node.val < root.val && root.left == null){
                root.left = node;
                return root;
            } else if (node.val < root.val) {
                insertNode(root.left,node);
            } else if (node.val > root.val && root.right == null) {
                root.right = node;
                return root;
            } else {
                insertNode(root.right,node);
            }
            return root;
        }
    }
}
#112 删除排序链表中的重复元素
给定一个排序链表，删除所有重复的元素每个元素只留下一个。
样例：
给出 1->1->2->null，返回 1->2->null
给出 1->1->2->3->3->null，返回 1->2->3->null
标签：链表

/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param ListNode head is the head of the linked list
     * @return: ListNode head of linked list
     */
    public static ListNode deleteDuplicates(ListNode head) { 
        if(head == null){
            return head;
        }else if(head.next == null){
            return head;
        }else{
            ListNode tmp = head;
            while(head.next!=null){
                if(head.next.val == head.val){
                     head.next = head.next.next;
                } else {
                    head = head.next;
                }
            }
            return tmp;
        }
    }  
}

#373 奇偶分割数组
分割一个整数数组，使得奇数在前偶数在后。
样例：给定 [1, 2, 3, 4]，返回 [1, 3, 2, 4]。
标签：数组

public class Solution {
    /**
     * @param nums: an array of integers
     * @return: nothing
     */
    public void partitionArray(int[] nums) {
        if (nums == null || nums.length == 0){
            return ;
        } else {
            int tmp = 0;
            int count = 0;
            for (int i = 0; i < nums.length; i++) {
                if (nums[i] % 2 != 0){
                    tmp = nums[count];
                    nums[count] = nums[i];
                    nums[i] = tmp;
                    count++;
                }
            }
        }
    }
}
#423 有效括号序列
给定一个字符串所表示的括号序列，包含以下字符： '(', ')', '{', '}', '[' and ']'， 判定是否是有效的括号序列。
样例：括号必须依照 "()" 顺序表示， "()[]{}" 是有效的括号，但 "([)]"则是无效的括号。
标签：栈
时间复杂度：O(n)的时间，n为括号的个数

public class Solution {
    /**
     * @param s A string
     * @return whether the string is a valid parentheses
     */
    public boolean isValidParentheses(String s) {
        if (s == null || s.equals("")){
            return true;
        } else {
            Stack stack = new Stack();
            for (int i = 0; i < s.length(); i++){
                if (stack.empty()) {
                    stack.push(s.charAt(i));
                } else {
                    if (s.charAt(i) == ')' && stack.peek() == '(' ){
                        stack.pop();
                    } else if (s.charAt(i) == ']' && stack.peek() == '[' ){
                        stack.pop();
                    } else if (s.charAt(i) == '}' && stack.peek() == '{' ){
                        stack.pop();
                    } else {
                        stack.push(s.charAt(i));
                    }
                }
            }
            return stack.empty();
        }
    }
}

#424 计算逆波兰表达式
在逆波兰表达法中，其有效的运算符号包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰计数表达。
示例：
["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6
标签：栈

public class Solution {
    /**
     * @param tokens The Reverse Polish Notation
     * @return the value
     */
    public int evalRPN(String[] tokens) {
       if(tokens == null){
           return 0;
       }else if(tokens.length == 0){
           return 0;
       }else{
           Stack stack =  new Stack();
           int n1 = 0;
           int n2 = 0;
           for ( int i = 0 ; i < tokens.length; i++) {
               if ( tokens[i].equals("+") ){
                   n1 = Integer.parseInt((String)stack.pop());
                   n2 = Integer.parseInt((String)stack.pop());
                   stack.push(String.valueOf(n1 + n2));
               } else if( tokens[i].equals("-") ) {
                   n1 = Integer.parseInt((String)stack.pop());
                   n2 = Integer.parseInt((String)stack.pop());
                   stack.push(String.valueOf(n2 - n1));
               } else if( tokens[i].equals("*") ) {
                   n1 = Integer.parseInt((String)stack.pop());
                   n2 = Integer.parseInt((String)stack.pop());
                   stack.push(String.valueOf(n2 * n1));
               } else if( tokens[i].equals("/") ) {
                   n1 = Integer.parseInt((String)stack.pop());
                   n2 = Integer.parseInt((String)stack.pop());
                   stack.push(String.valueOf(n2 / n1));
               } else{
                   stack.push(tokens[i]);
               }
           }
           return Integer.parseInt((String)stack.pop());
       }
    }
}



#488 快乐数
写一个算法来判断一个数是不是"快乐数"。
一个数是不是快乐是这么定义的：对于一个正整数，每一次将该数替换为他每个位置上的数字的平方和，
然后重复这个过程直到这个数变为1，或是无限循环但始终变不到1。如果可以变为1，那么这个数就是快乐数。
样例：19是一个快乐数
1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1
标签：哈希表

public class Solution {
    /**
     * @param n an integer
     * @return true if this is a happy number or false
     */
    public boolean isHappy(int n) {
        if (n == 1) {
            return true;
        } else {
           int temp = n;
           LinkedList<Integer> linkedList = new LinkedList<Integer>();
           linkedList.add(temp);
           while (true) {
               temp = getNext(temp);
               if (temp == 1) {
                   return true;
               } else if(linkedList.contains(temp)){
                   return false;
               }
                linkedList.add(temp);
           }
        }
    }
    
    /**
     * 获取下一个数
     * @param num
     * @return
     */
    private int getNext(int n){
        int result = 0;
        while (n > 0) {
            result +=  (n%10)*(n%10);
            n = n / 10;
        }
        return result;
    }
}
